{"version":3,"sources":["services/lineService.js","components/SearchForm.js","components/SearchResults.js","App.js","index.js"],"names":["lineService","getLine","searchQuery","axios","get","params","then","response","data","SearchForm","props","useState","setSearchQuery","setSearchResults","handleSubmit","event","a","preventDefault","length","window","alert","results","onSubmit","type","placeholder","onChange","target","value","SearchResults","searchResults","map","searchResult","i","line_id","season","episode","scene","line_text","speaker","App","ReactDOM","render","document","getElementById"],"mappings":"oLAiBeA,EAJK,CAClBC,QAXc,SAACC,GAOf,OANgBC,IAAMC,IAHR,cAIZ,CACEC,OAAQ,CACNH,YAAaA,KAGJI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,OCqC5BC,EA3CI,SAACC,GAClB,MAAsCC,mBAAS,IAA/C,mBAAOT,EAAP,KAAoBU,EAApB,KAGEC,EACEH,EADFG,iBAGIC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACnBD,EAAME,mBAEFf,EAAYgB,OAAS,GAHN,uBAIjBC,OAAOC,MAAM,uBAJI,0CAQGpB,EAAYC,QAAQC,GARvB,QAQbmB,EARa,QAUPH,QAAU,EACpBL,EAAiB,eACRQ,EAAQH,QAAU,GAAKG,EAAQH,QAAU,IAClDL,EAAiBQ,GAEjBR,EAAiB,qBAfA,2CAAH,sDAmBlB,OACE,8BACE,uBAAMS,SAAUR,EAAhB,UACE,uBACES,KAAK,OACLC,YAAY,eACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBd,EAAec,EAAOC,UAElD,uBACEJ,KAAK,SACLI,MAAM,iBCYDC,EAlDO,SAAClB,GAErB,IACEmB,EACEnB,EADFmB,cAGF,OACE,gCACE,gDAEG,WACC,OAAQA,GACN,IAAM,cAEN,IAAM,oBACJ,OAAO,4BAAIA,IACb,QACE,OACE,kCACE,gCACE,+BACE,yCACA,wCACA,yCACA,uCACA,2CACA,8CAGJ,gCACGA,EAAcC,KAAI,SAACC,EAAcC,GAAf,OACjB,+BACE,6BAAKD,EAAaE,UAClB,6BAAKF,EAAaG,SAClB,6BAAKH,EAAaI,UAClB,6BAAKJ,EAAaK,QAClB,6BAAKL,EAAaM,YAClB,6BAAKN,EAAaO,YANXN,YArBtB,OCUMO,MAjBf,WACE,MAA0C5B,mBAAS,eAAnD,mBAAOkB,EAAP,KAAsBhB,EAAtB,KAEA,OACE,gCACE,0DACA,sEACA,cAAC,EAAD,CACEA,iBAAkBA,IAEpB,cAAC,EAAD,CACEgB,cAAeA,QCZvBW,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f23ff4ca.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/lines/'\n\nconst getLine = (searchQuery) => {\n  const request = axios.get(baseUrl,\n    {\n      params: {\n        searchQuery: searchQuery\n      }\n    })\n  return request.then(response => response.data)\n}\n\nconst lineService = {\n  getLine,\n}\n\nexport default lineService\n","import React, { useState } from 'react'\n\nimport lineService from '../services/lineService'\n\nconst SearchForm = (props) => {\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const {\n    setSearchResults\n  } = props\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n\n    if (searchQuery.length < 3) {\n      window.alert('Query is too short!')\n      return\n    }\n\n    const results = await lineService.getLine(searchQuery)\n\n    if (results.length <= 0) {\n      setSearchResults('No results.')\n    } else if (results.length >= 1 && results.length <= 100) {\n      setSearchResults(results)\n    } else {\n      setSearchResults('Too many results!')\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Search here!'\n          onChange={({ target }) => setSearchQuery(target.value)}\n        />\n        <input\n          type='submit'\n          value='Search'\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default SearchForm","import React from 'react'\n\nconst SearchResults = (props) => {\n\n  const {\n    searchResults\n  } = props\n\n  return (\n    <div>\n      <h2>Search Results</h2>\n      {\n        (() => {\n          switch (searchResults) {\n            case ('No results.'):\n              return <p>{searchResults}</p>\n            case ('Too many results!'):\n              return <p>{searchResults}</p>\n            default:\n              return (\n                <table>\n                  <thead>\n                    <tr>\n                      <th>line_id</th>\n                      <th>season</th>\n                      <th>episode</th>\n                      <th>scene</th>\n                      <th>line_text</th>\n                      <th>speaker</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {searchResults.map((searchResult, i) =>\n                      <tr key={i}>\n                        <td>{searchResult.line_id}</td>\n                        <td>{searchResult.season}</td>\n                        <td>{searchResult.episode}</td>\n                        <td>{searchResult.scene}</td>\n                        <td>{searchResult.line_text}</td>\n                        <td>{searchResult.speaker}</td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              )\n          }\n        })()\n      }\n    </div>\n  )\n}\n\nexport default SearchResults","import React, { useState } from 'react'\n\nimport SearchForm from './components/SearchForm'\nimport SearchResults from './components/SearchResults'\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState('No results.')\n\n  return (\n    <div>\n      <h1>The Office Script Search</h1>\n      <h2>Search for any line from The Office!</h2>\n      <SearchForm\n        setSearchResults={setSearchResults}\n      />\n      <SearchResults\n        searchResults={searchResults}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}